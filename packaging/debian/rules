#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

PYBUILD_NAME := "xia-converter"

# The absolute path of the rules file.
RULES_PATH := $(realpath $(firstword $(MAKEFILE_LIST)))

# The working directory is obtained by removing the
# "/debian/rules" string at the end of RULES_PATH.
WORKING_DIR := $(realpath $(RULES_PATH:/debian/rules=))

# List of files in the working directory which do not belong
# to the git repository (all files except the debian/ directory).
FILES_TO_CLEAN := $(shell cd $(WORKING_DIR) && \ls | grep -v debian)

# Version number in the changelog to create the tarball
# of the upstream application with the good name.
VERSION := $(shell cd $(WORKING_DIR) && dpkg-parsechangelog | awk '/^Version/ {print $$2}' | cut -d'-' -f1)


%:
	dh $@ --with python2

# To use setup.py with --root=debian/$(PYBUILD_NAME) instead of
# --root=debian/tmp. See "man dh_auto_install" for more details.
override_dh_auto_install:
	cd "$(WORKING_DIR)" && npm install -g grunt-cli
	cd "$(WORKING_DIR)" && npm install lodash
	cd "$(WORKING_DIR)" && npm install
	cd "$(WORKING_DIR)" && PATH="$$PATH:/usr/local/bin" grunt default
	cd "$(WORKING_DIR)" && rm -rf src/
	cd "$(WORKING_DIR)" && mv build/* .
	dh_auto_install --destdir="$(WORKING_DIR)/debian/$(PYBUILD_NAME)"




########################
### Personal targets ###
########################

clean_for_git:
	# Remove all files which mustn't belong to the git repository.
	dh_clean
	cd "$(WORKING_DIR)" && rm -fr *.egg-info/
	cd "$(WORKING_DIR)" && rm -fr build/
	# All files in the working directory are removed except the debian/ directory.
	{ cd "$(WORKING_DIR)" && [ ! -z "$(FILES_TO_CLEAN)" ] && rm -rf $(FILES_TO_CLEAN); } || true
	# All files in the parent directory created by the building.
	cd "$(WORKING_DIR)" && rm -f ../*.deb
	cd "$(WORKING_DIR)" && rm -f ../*.dsc
	cd "$(WORKING_DIR)" && rm -f ../*.changes
	cd "$(WORKING_DIR)" && rm -f ../*.debian.tar.gz
	cd "$(WORKING_DIR)" && rm -f ../*.debian.tar.xz
	cd "$(WORKING_DIR)" && rm -f ../*.orig.tar.gz
	cd "$(WORKING_DIR)" && rm -f ../*.build

populate_working_dir: clean_for_git
	cd "$(WORKING_DIR)/.." && tar --exclude-vcs -zcf xia_$(VERSION).orig.tar.gz upstream
	cd "$(WORKING_DIR)" && tar --strip-components=1 -zxf ../xia_$(VERSION).orig.tar.gz -C .

create_deb: populate_working_dir
	cd "$(WORKING_DIR)" && debuild -us -uc && echo 'Building is OK!'


